#+title: maven

* Maven with Web application

** Notes
*** Generate JSF eclipse application
It seems that using only =mvn eclipse:eclipse= will have some
problems generating the project, instead use =mvn eclipse:eclipse
-Dwtpversion=2.0= to include WTP support.

* FAQs
** how to run a main class

*** Running from command line
First we'll need to compile and install our code by:

#+begin_src sh
mvn compile
mvn install
#+end_src

Then, run with:
#+begin_src sh
mvn exec:java -Dexec.mainClass="com.xxxx.xxx"
mvn exec:java -Dexec.mainClass="com.xxxx.xxx" -Dexec.args="arg0 arg1 arg2"
#+end_src

we can also save it in the pom file:
#+begin_src xml
<project>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>com.example.Main</mainClass>
                    <arguments>
                        <argument>argument1</argument>
                    </arguments>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
#+end_src

*** Running in a phase in pom.xml
#+begin_src xml
<build>  
 <plugins>  
  <plugin>  
   <groupId>org.codehaus.mojo</groupId>  
   <artifactId>exec-maven-plugin</artifactId>  
   <version>1.1.1</version>  
   <executions>  
    <execution>  
     <phase>test</phase>  
     <goals>  
      <goal>java</goal>  
     </goals>  
     <configuration>  
      <mainClass>com.vineetmanohar.module.CodeGenerator</mainClass>  
      <arguments>  
       <argument>arg0</argument>  
       <argument>arg1</argument>  
      </arguments>  
     </configuration>  
    </execution>  
   </executions>  
  </plugin>  
 </plugins>  
</build>  
#+end_src

Then =CodeGenerator.main()= will be run while executing:
#+begin_src sh
mvn test
#+end_src


- [[http://www.vineetmanohar.com/2009/11/3-ways-to-run-java-main-from-maven/][3 ways to run Java main from Maven]]

** maven download metadata everytime

Use offline mode to resolve this:

#+begin_src sh
mvn clean install -o
#+end_src

- [[http://stackoverflow.com/questions/16421454/why-maven-is-downloading-metadata-every-time]]

** maven multi-thread build
#+begin_src
mvn -T 4 clean install # Builds with 4 threads
mvn -T 1C clean install # 1 thread per cpu core
mvn -T 1.5C clean install # 1.5 thread per cpu core
#+end_src

[[https://cwiki.apache.org/confluence/display/MAVEN/Parallel%2Bbuilds%2Bin%2BMaven%2B3][https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3]]


** How to skip test
#+begin_src sh
mvn -Dmaven.test.skip=true or -DskipTests=true 
#+end_src

[[http://maven.apache.org/general.html#skip-test][Skip Test]]
