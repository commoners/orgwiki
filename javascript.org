#+TITLE: JavaScript Notes

* JS Box metrics
<<sec:js-box-metrics>>

There are several concepts of metrics used in javascript.

** CSS width/height

Without =box-sizing: border-box= being set, it is the size of the
_content area_, which lies inside the padding. CSS properties can be
set using =element.style= property and retrieved using
=getComputedStyle()/currentStyle=.

** clientWidth/Height

Size of the =client area=: content area with padding, but without scrollbars.

#+BEGIN_EXAMPLE
clientWidth = CSS-width + paddings - scrollbar-width;
clientHeight = CSS-height + paddings - scrollbar-height;
#+END_EXAMPLE

NOTE: the scrollbars will first occupy the padding area, and if the
padding area is not large enough, it will further occupy the content
area, meanwhile the CSS width/height stays unchanged. Thus as in the
following image where =padding > scrollbar-width=:

[[http://javascript.info/files/tutorial/browser/dom/metric2.png]]

The size can be calculated:
#+BEGIN_EXAMPLE
clientWidth = 300(width) + 40(paddings) - 16(scrollbar) = 324
clientHeight = 200(height) + 40(paddings) = 240
#+END_EXAMPLE

However, if the =padding < scrollbar-width=:

[[http://javascript.info/files/tutorial/browser/dom/metricClientWidth.png]]

The _CSS width_ stays unchanged(300px), while the client width:

#+BEGIN_EXAMPLE
clientWidth = 300(width) + 0(paddings) - 16(scrollbar) = 284
#+END_EXAMPLE

Thus the =clientWidth/clientHeight= reflect the real size of the content.

** scrollWidth/Height
Content area width and height _including_ the scrolled out part. That
means they are the same as clientWidth/Height, but includes full
scrollable area.

** scrollTop/scrollLeft
The size of scrolled out part: vertical and horizontal. The value is
always in pixels.

NOTE that you can set values to this property, the browser will scroll
the document accordingly.

** offsetWidth/Height
Outer box width/height, full size with borders, but without margins.

** clientTop/Left
The indent of _client area_ from box outer corner.

[[http://javascript.info/files/tutorial/browser/dom/metric3.png]]

Normally, the value is:
#+BEGIN_EXAMPLE
clientTop = border-top-width
clientLeft = border-left-width
#+END_EXAMPLE

However, in case of a _right-to-left_ document, where the scrollbar
appears on the top and left, the value is:
#+BEGIN_EXAMPLE
clientTop = border-top-width + scrollbar-width
clientLeft = border-left-width + scrollbar-width
#+END_EXAMPLE

** offsetParent, offsetLeft/Top
Properties =offsetLeft= and =offsetTop= reflects a relative shift of
an element from its =offsetParent=.

The =offsetParent= is the closest(nearest in the containment
hierarchy) *positioned* containing element. If the element is
non-positioned, but the ancestor is a table cell(=td=, =th= or
=table=) or root element (=html= in standards compliant mode; =body=
in quirks rendering mode) is the =offsetParent=. See
[[http://dev.w3.org/csswg/cssom-view/#dom-htmlelement-offsetparent][DOM
HTML Element -- offsetparent]] for specification.

[[http://javascript.info/files/tutorial/browser/dom/metricOffset.png]]

** Summary
1. The _CSS width/height_ is the width of the content area, and will
   stick to the value it is.
2. The =Client Area= is the content area plus padding, but do not include
   the scrollbar.
3. The =Offset Area= is the whole content of an element except the margin.
4. All the width/height and left/top properties are calculated
   according to what they are(client/offset area).

[[http://javascript.info/files/tutorial/browser/dom/metricSummary.png]]



** References
[[http://javascript.info/tutorial/metrics][JS metrics]]

* JS Position/Offset

The [[sec:js-box-metrics][previous section]] introduced the box model
of javascript. However, there are still two important requirement we
have: get the position of current element.

Two concept will be involed here: document and viewport.

[[https://developer.mozilla.org/en/docs/Web/API/Document][Document]]
serves as an entry point into the web page's content(The DOM
tree). You can treat it as the =<html>= object in HTML source
code. And JS provide a variable =document= for it.

[[https://developer.mozilla.org/en-US/docs/Glossary/Viewport][Viewport]]
represents a polygonal(normally rectangular) area in computer graphics
currently being viewed. So we can treat it as the browser that
displays contents. 

I actually cannot distinguish viewport from
[[https://developer.mozilla.org/en-US/docs/Web/API/Window][window]],
it seems that viewport is an abstract concept that refer to any
view-able area, while window refers to the actual "physical" object.

Because the window size can scroll, so the position of an element
could be relative to either document or viewport.

As for those relative to the *viewport*, JS provide us a handy function:
[[https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect][getBoundingClientRect()]]
that will return the size of an element and its position relative to viewport.

As for those relative to the *document*, JS do not have direct answer,
however the JQuery function [[http://api.jquery.com/offset/][.offset]]
is an alternate to that. Of course you can implement it in plain JS as
well, You can check the JQuery implementation
[[http://james.padolsey.com/jquery/#v%3D1.11.2&fn%3DjQuery.fn.offset][here]].

* Event Position
- clientX/clientY :: the coordinate of the mouse pointer relative
  to the current window(viewport), when the event was triggered.
- screenX/screenY :: the coordinate of the mouse pointer, relative to
  the screen, when the event was triggered.
- pageX/pageY :: the coordinate of the event relative to the whole
  document. This is non-standard.
- layerX/layerY :: the coordinate of the event relative to the current
  layer. Non-standard.

[[http://web.jobbole.com/82419/][About JS event]]

* Prototype
Modifying the prototype of a javascript class(i.e. a function) will
affect all instances using this object. It is like editing the class
itself in Java and all instances of this class will be affected.

[[http://www.w3schools.com/js/js_object_prototypes.asp][prototype]] is
the only way of doing this.

* This
NOTE: this section is maily taken from [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this][MDN]]

Normally,
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this][this]]
is determined by how a function is called. It cannot be set by
assignment during execution.

** Global context
In global execution contex(outside of any function) =this= refers to
the global object, whether in scrit mode or not.

#+BEGIN_SRC javascript
  console.log(this.document === document); // true

  // In web browsers, the window object is also the global object:
  console.log(this === window); // true
#+END_SRC

** Function context
Inside a function, the value of =this= depends on how the function is
called.

*** Simple call
#+BEGIN_SRC javascript
  function f1(){
    return this;
  }

  f1() === window; // global object
#+END_SRC

In this case, the value of =this= is not set by the call. Since the
code is not in =strict= mode, the value of =this= must always be an
object so it defaults to the global object.

#+BEGIN_SRC javascript
  function f2(){
    "use strict"; // see strict mode
    return this;
  }

  f2() === undefined;
#+END_SRC

In =strict= mod,e the value of =this= remains at whatever it is set
when entering the execution context.

*** As an object method
When a function is called as a method of an object, its =this= is set
to the object the method is called on.

#+BEGIN_SRC javascript
  var o = {
      prop: 37,
      f: function() {
  	return this.prop;
      }
  };

  console.log(o.f()); // logs 37
#+END_SRC

This behavior is not at all affected by how or where the function was defined.

#+BEGIN_SRC javascript
  var o = {prop: 37};

  function independent() {
    return this.prop;
  }

  o.f = independent;

  console.log(o.f()); // logs 37
#+END_SRC

*** As a constructor
when a function is used as a constructor(with the =new= keyword), its
=this= is bound to the new object being constructed.

*** call and apply
By utilizing =call= and =apply=, we are able to specify =this= in a
function to anything we want:
#+BEGIN_SRC javascript
  function add(c, d){
    return this.a + this.b + c + d;
  }

  var o = {a:1, b:3};

  // The first parameter is the object to use as
  // 'this', subsequent parameters are passed as 
  // arguments in the function call
  add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16

  // The first parameter is the object to use as
  // 'this', the second is an array whose
  // members are used as the arguments in the function call
  add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34
#+END_SRC

** As a DOM event handler
When a function is used as an event handler, its =this= is set to the
element the event fired from.

** As an in-line event handler
Its =this= is set to the DOM element on which the listener is placed.

** Read More
- [[http://web.jobbole.com/54267/][解密 JavaScript 中的 this]]

* Javascript and OOP

Actually ECMAScript 2015(ES6) introduced some new keywords to support
OOP in javascript. But we can actually simulate the OOP in older
versions. Here are something to note when implement it.

*Two things* we need to care about are:
1. How to inherit properties and methods from the super class?
2. How to properly set the initial values of inherited properties?

** The inheritance chain
The first is called to
[[http://stackoverflow.com/questions/4152931/javascript-inheritance-call-super-constructor-or-use-prototype-chain][construct
a prototype chain]]. Which is a function like this:

#+BEGIN_SRC javascript
  function extend(base, sub) {
    // Avoid instantiating the base class just to setup inheritance
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
    // for a polyfill
    // Also, do a recursive merge of two prototypes, so we don't overwrite 
    // the existing prototype, but still maintain the inheritance chain
    // Thanks to @ccnokes
    var origProto = sub.prototype;
    sub.prototype = Object.create(base.prototype);
    for (var key in origProto)  {
       sub.prototype[key] = origProto[key];
    }
    // Remember the constructor property was set wrong, let's fix it
    sub.prototype.constructor = sub;
    // In ECMAScript5+ (all modern browsers), you can make the constructor property
    // non-enumerable if you define it like this instead
    Object.defineProperty(sub.prototype, 'constructor', { 
      enumerable: false, 
      value: sub 
    });
  }
#+END_SRC

With the help of the lookup strategy of Javascript's prototype, now
we inherited parent's properties and methods(called prototype).

** The constructor hierarchy
In traditional OOP language like java, we will initialize the
properties in its constructor, and when it is inherited by a
subclass, we should call its constructor in the subclass to get the
things right.

#+BEGIN_SRC java
  public class Shape {
      private String shape;

      Shape(String shape) {
  	this.shape = shape;
      }

      String getShape() {
  	return shape;
      }
  }
  public class Rect extends Shape {
      private int width;
      private int height;
      Rect() {
  	super("rect");
  	width = 0;
  	height = 0;
      }

      public static void main(String[] args) {
  	Rect rect = new Rect();
  	System.out.println(rect.getShape());
      }
  }
#+END_SRC

Note the call to =super= which in this case refer to constructor =Shape(String)=.

Although we've constructed the inheritance chain, the properties that
are set via the constructor can not be conveniently set in the sub
class. Here is a way to directly call the constructor of the super
class:

#+BEGIN_SRC javascript
  function Shape(shape) {
      this.shape = shape;
  }

  Shape.prototype.getShape = function () {
      return this.shape;
  }

  function Rect() {
      // should call the super class
      Shape.call(this, "rect")
  }

  extend(Shape, Rect);

  var rect = new Rect();
  console.log(rect.getShape());
#+END_SRC

The problem is with the =extend= utility, we actually haven't decide
which super class we are going to extend, that means we don't know
the name of =Shape= when we write =Rect()=. And under ECMAScript
2015, we don't have the =super= keyword to refer to the constructor.

So we need to save the super class's constructor. Below is the
modified version of =extend=:
#+BEGIN_SRC java
  function extend(base, sub) {
      var origProto = sub.prototype;
      sub.prototype = Object.create(base.prototype);
      for (var key in origProto)  {
  	sub.prototype[key] = origProto[key];
      }

      // save the super class's constructor.
      sub.prototype.superConstructor = base.prototype.constructor

      sub.prototype.constructor = sub;
      Object.defineProperty(sub.prototype, 'constructor', { 
  	enumerable: false, 
  	value: sub 
      });
  }
#+END_SRC

Now it's time to replace the call to =Shape=:
#+BEGIN_SRC javascript
  function Rect() {
      this.superConstructor.call(this, "rect")
  }
#+END_SRC

And we get the same result.

In this way, we get the basic OOP out of javascript, however, there
is no default call to super class's default constructor. So we should
manually call it every time. Please think about what you can do to
enhance it.
