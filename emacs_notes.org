#+TITLE: Emacs Notes

* Notes on the manual
** Quick Movement
   1. =M-g c=: read a number N and move point to buffer position N.
   2. =M-g g=: goto-line N.
** Cursor position information
   1. =C-x ==: Display the information of the character after point.
   2. =M-==: Display the number of lines, words, and characters of a region.
** Repeate a command
   use =C-x z= (repeat).
** Search history of inputs
   1. =M-r REGEXP <RET>= similar to =C-r= in bash.
   2. =M-s REGEXP <RET>= forward search.
** Funny Help Entries:
   1. =C-h e= to bring "*Message*" Buffer.
   2. =C-h h= to display "HELLO" file.
   3. =C-h l= to display a description of your last 300 keystrokes(=view-lossage=).
   4. =C-h w COMMAND <RET>= to show keys run the command named COMMAND (=where-is=).
   5. =C-h c KEY= displays in the echo area the name of the command
      that KEY is bound to.
** Mark and the region

** kill ring
   Emacs will save the contens yanked by =C-k= or =M-w=. We can
   paste/yank the contents last killed by press =C-y=. But if we want
   the contens earlier, we can press =M-y= multiple times after press
   =C=y=. 
   
* Eshell
** Visual Commands
   Some commands are not sufficient to run inside eshell, such as
   =top=. They are supported by =Term= mode. We can add these commands
   into =eshell-visual-commands= to make eshell invoke =term= mode automatically.
   
** References
   - [[http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/][Complete Guide to Mastering Eshell]]

* FAQs
** How to insert not graphic characters?
1. Insert =C-q= First.
2. =C-x 8 <RET> <unicode>= to insert unicode characters.

** How to swap values by regexp-replace
The idea is mixing elisp expressions in regular expressions.

For example, we want to swap all ocurrences of word =left= and
=right=, the we can specify the pattern to be:
#+begin_example
  Replace: \(left\)\|right
#+end_example
And the next step is to correctly specify the replace string, note
that by the previous pattern, we can capture the matches of =left= by
=\1= as we shall see later. Now replace with:
#+begin_example
  Replace with: \,(if \1 "right" "left")
#+end_example
We use =\,= to insert elisp expression. For more information, check [fn:elfre]

[fn:elfre] [[http://www.masteringemacs.org/article/evaluating-lisp-forms-regular-expressions][Evaluating Lisp Forms in Regular Expressions]]




