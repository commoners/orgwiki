#+TITLE: How to Design Programs Notes

* Design Functions
** Information and Data
Information can be thought as facts about the program's domain, while data is
just a "literal" representation.

Take temperature as an example. `100` is only a prepresentation or data. We
know nothing only by looking at this literal. When the data is `interpretted`
in the domain of temperature, we know it means 100C or 100F. On the other
hand, computers or programs cannot understand 100C or 100F directly. We then
can `represent` it as a number `100` or strings link `100C` or `100F`, these are
what computers can understand.

** Process of Designing Functions
*->* This process can be guideline of writing comments for functions.

- Express how information is represented as data.
  #+BEGIN_EXAMPLE
  ; we use plain numbers to represent temperatures.
  #+END_EXAMPLE
- Write down a signature, a purpose statement, and a function header.
  A _signature_ is like `haskell`'s function type.
  #+BEGIN_EXAMPLE
  ; String -> Number
  #+END_EXAMPLE
  _Purpose statement_ is a short line to describe the purpose of a function. A
  better way to express this is to use descriptive names for functions.
  _Function Header_ is the header of a function without its implementation.
- Illustrate the signature and the purpose statement with some functional
  examples.
  #+BEGIN_EXAMPLE
  ; Number -> Number                                      ; signature
  ; compute the area of a square whose side is len        ; purpose
  ; given: 2, expect: 4                                   ; examples
  ; given: 7, expect: 49
  (define (area-of-square len) 0)                         ; header
  #+END_EXAMPLE

- The next step is considering what and how are we going to compute. This is
  done by inserting *templates* in the function body(for example, the ones
  introduced in the following chapters).
- Now _code_. Fill in the information needed by the template and other
  details.
- Last one: Test the functions. (in racket or other script languages, directly
  make some unit test cases is quite simple, do it!)
  
** Domain Knowledge
   Two forms of _domain knowledge_:
   - Knowledge from external domains.
   - Knowledge about the library functions in the chosen programming language.

*** From Functions to Programs
The `car` problem: Design a program that moves a car across the world canvas,
from left to right, at the rate of three pixels per clock tick.

How to tare down the problem into program elements:
1. Find out constant staff and assign them to global constant variables.
2. Find out properties that change over time. Design how to represent them with
   data. (can we call them _states_?)
3. Design a number of functions to handle al these variable properties.
4. write a _main_ function so as to connect real world to our programs.
  
We can conclude it into 4 elements when designing:
1. global states(constants).
2. data representation for states.
3. actions to handle states.
4. main function.

*** Designing World Programs
    Why is modifying the sample problem and adding mouse event handler
    is so straightforward? First it strictly separate the *model*(the
    data that a program tracks) and the *view*(how the program show
    results). Second is the design recipes for programs and functions
    organize programs in the right way.
    
    This teaches us two leason: 
    1. separate our modules.
    2. correctly organize our design recipes.(including data and
       functions, etc.)
       
* Intervals, Enumerations, Itemizations
  Why we need these? Often, we'll need to design programs with
  restrictions on our built-in collections. One way to restrict it is
  to enumerate a bunch of elements form a collection and to say that
  these are the only ones that we are going to use. However,
  enumeration will work only under finite number of elements, thus we
  need intervals for "infinately" many elements.
  
** Conditional Computations
   Review the =cond= expression:
   #+BEGIN_SRC scheme
     (cond
      [condition-expr-1 result-expr-1]
      [condition-expr-2 result-expr-2]
      ...
      [condition-expr-n result-expr-n])
   #+END_SRC
   In may problem contexts, a function must distinguish several
   different situations. With a =cond= expression expression, you can
   use one line per possiblity and thus _remaind the reader of the
   code of the different situations from the problem statement_.

   Contrast =cond= with =if=. we use =if= is more suited when we want
   to say "one or the other".
   
   Note that even if we can code with either one and the result is OK,
   don't do it! Codes are read not only by machine, but also by
   human. Thus express the idea directly and clearly is important.
   
   For example, in C language, using =switch= would be more expressive
   than nested =if= statements.
   
** How it works
   #+BEGIN_QUOTE
   Just looking at the =cond= expression you cannot predict which of
   the three =cond= clause is going to be used._And that is the point
   of a function._
   #+END_QUOTE

   
** Enumerations
   The main idea of an enumeration is that it defines a collection of
   data as a *finite* number of pieces of data. So we can iterate
   through all its possibilities with a =cond= branch. This is the
   *template* of dealing with enumerations.
   
   Example(From the book):
#+BEGIN_SRC scheme
; A TrafficLight shows one of three colors:
; – "red"
; – "green"
; – "yellow"
; interp. each element of TrafficLight represents which colored
; bulb is currently turned on

; TrafficLight -> TrafficLight
; given state s, determine the next state of the traffic light
 
(check-expect (traffic-light-next "red") "green")
 
(define (traffic-light-next s)
  (cond
    [(string=? "red" s) "green"]
    [(string=? "green" s) "yellow"]
    [(string=? "yellow" s) "red"]))
#+END_SRC
   There are 3 states of =TrafficLight=, thus we generate 3 =cond= branches.
   
   *->* [[http://www.ccs.neu.edu/home/matthias/HtDP2e/part_one.html#%28counter._%28figure._fig~3acond-enum%29%29]]
   
   Note the difference between these two implementation. The book
   talked about the _re-order_ of the condition lines. It also says
   that _Naturally, this kind of re-arrangement is done *after* the
   function is designed properly._
   
   I think the *essence* here is maintain the information of the same
   level in the same level of =cond= expression. That means in this
   =cond= we only cares about the information: what keys do we care
   about? And condition =( = (string-length k) 1)= do not belong to
   this class of informaiton, thus we through it into the =else=
   branch. And we may generate a sub =cond= expression in =else=
   branch if needed.
   
** Intervals
   The main concept here contains two parts:
   1. the difference between _interval_ and _enumeration_ is
      _interval_ may contain *infinate* number of elements.
   2. However, we can represent _intervals_ in *finite* cases, each
      can be specified by a boundary check function.
   
   That means when contruct =cond= expression for these two cases, the
   main difference is how to write the _condition expressions_.
   #+BEGIN_SRC scheme
     ; for enumeration
     (define (iter-enumeration x)
       (cond
        [(= x 1) 1]
        [(= x 2) 2]
        [else 3]))

     ; for intervals
     (define (iter-interval x)
       [(< x 10) 1]
       [(< x 100) 2]
       [else 3])

     ; the main difference here is *=* and *<*
   #+END_SRC
   
** Itemization
   An interval distinguishes different subclasses of numbers; an
   enumeration spells out item for item the useful elements of an
   existing class of data.

   Does the _NorF_ example indicate that itemization is an abstraction
   that it combines different data types(Number or false) and output
   an enumeration(type NorF)?

   I think in the example of the book, itemization is just like an
   brief version of struct or class(the LR example).
   
   The test cases for "launch": when a function's main purpose is to
   iterate over "itemization", we could design their test cases
   according to its elements.
   
   The test cases for "fly": Test cases for Intervals should cover two
   boundaries and the one inside it.
   
** Designing With Itemization
   6 steps of designning probrolems(with itemization):
   1. When the problem statement distinguishes different classes of
      input information, you need carefully formulated data definitions.
   2. Add functions(signature, purpose statement, function header).
   3. Pick at least one example for testing. The example should cover
      cover each subclass in the data definition. That means at least
      one for each subclass, and if the class is a range, be sure to
      pick examples from the boundaries of the range and from its iterior.
   4. Write down a _template_ that mirrors the organization of
      subclasses with a =cond=
   5. For each =cond= line, fill in the code solving the sub-problem.
   6. Finally, run tests and make sure that the tests cover all =cond= clauses.

* Adding Structure
  Structure is a way of gluing information that belong to a unified
  concept. For example, a name, a phone number and an email address
  all belong to the concept of "contact".
  
** Structures
   Structure is like a container, we can put multiple objects in it,
   and extract a single object from it at the same time. So we have a
   *constructor* and *extractor* for structs.
   
   
** The Universe of Data
   It is often best to illustrate data definition with examples just
   like we illustrate the behavior of functions with examples:
   - for a built-in collection of data(number, string, etc.), choose
     your favorite examples.
   - for an enumeration, use several of the items of the enumeration;
   - for intervals, use the end points(if included) and at least one
     interior point
   - for itemizations, deal with each part separately;
   - for data definitions for structures, follow the natural language
     description, that is, use the constructor and pick an example
     from the data collection named for each field.

* Itemizations and Structures
  This chapter refine the design recepie. Two important concept here:
  template and wish list.
  
  Template of dealing with a certain kind of structure(itemization or
  lists in later chapter) reveals the essence of the it. Wish list is
  a way to destruct a problem by pretending that we had some features
  and implement them later.
   
* Lists

  #+BEGIN_QUOTE
    Then again, if this list is supposed to represent a record with a fixed
    number of pieces, use a structure type instead.
  #+END_QUOTE
    
This means that when designing programs, use lists oly when the number of
items is variable. Otherwise, choose _struct_, _vector_, etc. instead.

* Designing With Self-referential Data Definitions

This chapter talks about the design of new self-referential data(or
recursively defined data). And how to walk through all the elements of a
specific data.

Also the book gave out a "template" for designing functions for
self-referential data.

*->* Most data structures comes with a pattern, and there also exists a pattern
 of how to deal with it. This is what we called a template.
[[http://www.ccs.neu.edu/home/matthias/HtDP2e/part_two.html#%28counter._%28figure._fig~3adesign5%29%29|Designing a function for self-referential data]]

6 steps of designing a function:
1. problem analysis -> data definition
2. header -> signature; purpose; statement; dummy definition
3. example -> examples and tests.
4. template -> function template
5. definition -> full-fledged definition
6. test -> validated test.

** Non-empty Lists
   It is critical to have unified concept.

   For the definition below:
   #+BEGIN_SRC scheme
     ; A List-of-tmperatures is one of:
     ; - empty
     ; - (cons CTemperature List-of-temperatures)

     ; A CTemperature is a Number greater or equal to -256
   #+END_SRC
   It will lead to inconsistancy when the List is =empty=. Define an
   =average= function for example
   #+BEGIN_SRC scheme
     ; List-of-tempeartures -> Number
     ; compute the average tempearture
     (define (average alot)
       (/ (sum alot)
          (how-many alot)))
   #+END_SRC
   
   One solution is treat this definition as an itemization:
   #+BEGIN_SRC scheme
     ; List-of-temperatures -> Number
     ; compute the average tempearture
     (define (average alot)
       (cond
        [(empty? alot) 0]
        [else (/ (sum alot)
                 (how-many alot))]))
   #+END_SRC
   However, this will break our intuition that List-of-temperatures is
   self-referential and should be treated as it is. This =cond= clause
   broke this intuition.
   
   So, a better way would be refine the definition:
   #+BEGIN_SRC scheme
     ; A NEList-of-temperatures is one of:
     ; – (cons CTemperature empty)
     ; – (cons CTemperature NEList-of-temperatures)
     ; interp.: non-empty lists of measured temperatures
   #+END_SRC
   
   Note that both solution works. We'll treat the first one as a
   programming trick, the second as remoldeling. We're building
   software not only to make the work but reflect our literal concept
   as well. So, clarity and consistency of concept is capital.

* Design By Composition
  This chapter talks about when to design several function and hwo to
  compose theme into one program.
  
  There are some common tasks of processing data. It is convenient to
  have some utility function to finish these tasks.

** Composing Functions
   This book explains that programs are collections of definitions:
   structure type definitions, data definitions, constant definitions,
   and function definitions.
   
   A rough guideline for dividing labor among functions:
   #+BEGIN_QUOTE
   Formulate auxiliary function definitions for every dependency
   between quantities in the problem statement. In short, design one
   function per task.
   
   Formulate auxiliary function definitions when one data definition
   points to a second data definition. Roughly, design one template
   per data definition.
   #+END_QUOTE

   Turning a template into a complete functino definition means
   combining the values of the template's subexpressions into the
   final answer. As you do so, you might encounter several situations
   that suggest the need for auxiliary functions:
   1. If the composition of values requires knowledge of a particular
      domain of application.
   2. If the =cond= expression for case analysis is too complex.
   3. If the composition of values must process an element from a
      self-referential data definition.
   4. If everything fails, you may need to design a *more general*
      function and define the main function as a specific use of the
      general function.
      
   Keeping wish lists is actually learning how to de-struct a problem
   into several small pieces. Each entry is represented as function
   header as described before(signature, purpose, header, etc.).
   
* Similarities Everywhere

** Similarities In Functions
   "Good programmers are too lazy to define several closely related
   functions".

** More Similarities In Functions
   Normally, function abstration is done by finding out the difference
   between functions and replace them as function calls, these
   functions are new parameters we should add to the abstracted functions.
   
   Using abstracted function is similar to using Macro in C
   langauge. It saves typing and has control over all instances. If
   there is a bug in abstracted function, fix it will fix all instances.

   Also it's convenient to create new instances by our need once we have
   abstracted functions.
   
** Similarities In Data Definition
   For the following two data definition:
   #+BEGIN_SRC scheme
     ; A List-of-numbers(short Lon) is one of: ; A List-of-String(short Los) is one of:
     ; - empty                                 ; - empty
     ; - (cons Number List-of-numbers)         ; - (cons Number List-of-String)
   #+END_SRC
   
   We can abstract it as:
   #+BEGIN_SRC scheme
     ; A [List-of ITEM] is one of:
     ; - empty
     ; - (cons ITEM [List-of ITEM])
   #+END_SRC
   We call such abstract data definition _paracmetric data definition_
   because of  the parameter.
   
   *->* Is this similar to Haskell's data definition and Monad?
   
* Designing Abstraction
  In essence, to abstract is to turn something concrete into a parameter.
  
** Abstractions From Examples
   1. *to compare* two items for similarities.
   2. *to abstract*: to replace the contents of similarities with new
      names and add these names to the parameter list.
   3. Now we must validate that the new function is correct. *to test*
      means to define the two original functions in term of the abstraction.
   4. Add *signature* to abstractions.
      
** Single Point Of Control
   That means we should formulate an abstractions and instantiate them
   whever needed. Thus we'll have only a single point of control: the abstraction.
   
   #+BEGIN_QUOTE
   Creating Abstrations: Form an abstraction instead of copying and
   modifying any piece of a program.
   #+END_QUOTE
   
** Abstractions From Templates
   Templates are themselves abstractions of operations on data. And
   function abstractions can be thought as code representation of the template.
   
   Instead of abstracting from similar functions, abstracting directly
   from templates should be more intuitive.
   
* Nameless Functions

** lambda, Technically
  Once we view _lambda_ as the primitive concept, functions becomes
  first class value. And function definitions are just syntax suger
  for define a lambda values. And _lambda_ is like a constructor.
  #+begin_src scheme
    (define (f x)
      (+ (sin x) x (* 3 x)))
    ; is syntax suger for the following:
    (define f
      (lambda (x)
        (+ (sin x) x (* 3 x))))
  #+end_src

** Abstracting With lambda II
   It is very powerful once we treat function as data. We can
   represent information as functions. And cosntructor of these kind
   of data would generate functions instead of classical data types
   like numbers, strings, etc. Check the book for example.

* The Poetry Of s-expressions
  Intertwineded data means the combination of different data types
  such as finite data and self-referential data. This chapter take
  'Tree', 'forest' and 'S-expressions' as example, then talks about
  how to simplify functions.
  
